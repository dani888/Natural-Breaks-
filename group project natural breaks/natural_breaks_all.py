# Natural Breaks
# CS Freshman success community
# 11/13/16
# Natural Breaks
# # Team 1: Daniel Werminghausen, Aisha Farooque, Ashwini Chauhan

from data30 import *
import sys
sys.setrecursionlimit(10**8)

# data = [5,10,9,4]
# data = [6,20,18,7,9] sorted below
# data = [6,7,9,18,20]
# data = [1,2,3,4,5,6]

def mean(numbers):
	 return float(sum(numbers)) / max(len(numbers), 1)


def sdam(numbers):
	average = mean(numbers)
	maths = map(lambda a:(a - average)**2, numbers)
	if maths:
		return reduce(lambda a,b:a + b, maths)
	return 0

# [1,2,3,4,5,6]

# [[1,2,3,4,5,6],[],[]]

# [[1,2,3,4,5],[6],[]]

# [[1,2,3,4],[5,6],[]]
# [[1,2,3],[4,5,6],[]]
# [[1,2],[3,4,5,6],[]]
# [[1],[2,3,4,5,6],[]]
# [[],[1,2,3,4,5,6],[]]

# [[1,2,3,4],[5],[6]]
# [[1,2,3,4],[],[5,6]]

# [[1,2,3],[4,5],[6]]
# [[1,2,3],[4],[5,6]]
# [[1,2,3],[],[4,5,6]]

# [[1,2],[3,4,5],[6]]
# [[1,2],[3,4],[5,6]]
# [[1,2],[3],[4,5,6]]
# [[1,2],[],[3,4,5,6]]

# [[1],[2,3,4,5],[6]]
# [[1],[2,3,4],[5,6]]
# [[1],[2,3],[4,5,6]]
# [[1],[2],[3,4,5,6]]
# [[1],[],[2,3,4,5,6]]

# [[],[1,2,3,4,5],[6]]
# [[],[1,2,3,4],[5,6]]
# [[],[1,2,3],[4,5,6]]
# [[],[1,2],[3,4,5,6]]
# [[],[1],[2,3,4,5,6]]
# [[],[],[1,2,3,4,5,6]]


# def sdcm_all(numbers):
# 	numbers = sorted(numbers)
# 	sdcms = [sdam(numbers[:i]) + sdam(numbers[i:]) for i, e in enumerate(numbers)] 
# 	index = sdcms.index(min(sdcms))
# 	return [numbers[:index],numbers[index:]]



# takes all combinations of gives total sdam score of each split
def total_sdam_score(combination):
	scores = map(lambda a: sdam(a),combination)
	return reduce(lambda a,b:a + b,scores)


# efficient 
def recStressCommunity(res,numbers,slices):
	# numbers = sorted(data)          USE SORTED IF YOU DONT WANT TO SORT YOURSELF< SORTING THE DATA WILL SLOW DOWN THE TIME 
	length = len(numbers)+1                                    
	result = []
	for i in range(length):
		z = len(numbers)-i
		c = slices - 1
		
		if c < 2:
			result = result + [res + [numbers[:z],numbers[z:]]]
		else:
			result = result + recStressCommunity(res + [numbers[:z]],numbers[z:],c)
		# for MEMORY
		# if result and result[0] and result[0][0] and type(result[0][0]) == type([]) and type(result[0][0][0]) != type([]):
			result = [reduce(lambda a,b:a if total_sdam_score(a) < total_sdam_score(b) else b,result)]
			#
	return result

# def iAccept10kCheck(res,numbers,slices):
# 	numOfPossibilities = 
# 	print("Checking all x possibilities.")
# 	if numOfPossibilities > 100000000:
# 		print("This will take awhile")

#	# return recStressCommunity([],[0,1],3)

# print(recStressCommunity([],data,1))
# print(recStressCommunity([],data,2))
# print(recStressCommunity([],data,3))
# print(recStressCommunity([],data,4))
# print("-----------------------------------------------------------------------------")
# print(iAccept10kCheck([],data,3))
print("Natural Break (5)")
print(recStressCommunity([],data,5))
print("-----------------------------------------------------------------------------")
print("Natural Break (7)")
print(recStressCommunity([],data,7))
print("-----------------------------------------------------------------------------")
# saves result in result.txt
# def save(file,data):
# 	f = open( file, 'w' )
# 	f.write( repr(data) )
# 	f.close()

# save("result.txt",recStressCommunity([],data,7))

# YOU CAN DO ANY AMOUNT OF SLICES YOU WANT FOR NATUAL BREAKS JUST TYPE IN A NUMBER AFTER DATA
# INTO THE SICES SPACE LIKE SHOWN FOR 1-12 SLICES.
# THE AMOUNT OF TIME WILL MULTIPLY ITSELF UP QUICKLY ESPECIALLY WITH THE SORTED FUNCTION.
# print(recStressCommunity([],data,1))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,2))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,3))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,4))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,5))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,6))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,7))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,8))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,9))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,10))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,11))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,12))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")     plug in a number after the comma after data to choose what number of natural break you want each higher number will require a long time to compute!!!!!!!!
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))
# print("-----------------------------------------------------------------------------")
# print(recStressCommunity([],data,))


##############################################################################################################
# result for natural brea#k 5,7
#data = [-19.09,
#0.59,
#0.6,
#0.6,
#0.6,
#0.6,
#0.61,
#0.61,
#0.61,
#0.09,
#0.12,
#0.13,
#0.13,
#0.14,
#0.16,
#0.18,
#0.19,
#0.22,
#0.22,
#0.24,
#7.37,
#7.87,
#8,
#19.13,
#20.22,
#32.53,
#46.05,
#49.88,
#50.02,
#61.98]

# Test/run code in Command prompt!
# data = [6,20,18,7,9] sorted below
# data = [6,7,9,18,20]
#print(recStressCommunity([],data,4));

# Combination result,:

# [[[6, 7, 9, 18, 20], [], [], []],      [[6, 7, 9, 18], [20], [], []],      [[6, 7, 9, 18], [], [20], []],  [[6, 7, 9, 18], [], [], [20]],
# [[6, 7, 9], [18, 20], [], []],   [[ 6, 7, 9], [18], [20], []],   [[6, 7, 9], [18], [], [20]],   [[6, 7, 9], [], [18, 20], []],
# [[6, 7, 9], [], [18], [20]],  [[6, 7, 9], [], [], [18, 20]],   [[6, 7], [9,18, 20], [], []],  [[6, 7], [9, 18], [20], []], 
# [[6, 7], [9, 18], [], [20]],   [[6,7], [9], [18, 20], []],   [[6, 7], [9], [18], [20]],    [[6, 7], [9], [], [18, 20]],
# [[6, 7], [], [9, 18, 20], []],   [[6, 7], [], [9, 18], [20]],   [[6, 7], [], [9], [18, 20]], [[6, 7], [], [], [9, 18, 20]],
# [[6], [7, 9, 18, 20], [], []],   [[6], [7, 9, 18], [20], []],   [[6], [7, 9, 18], [], [20]],   [[6], [7, 9], [18, 20], []],
# [[6], [7, 9], [18], [20]],   [[6], [7, 9], [], [18, 20]],   [[6], [7], [9, 18, 20], []],   [[6], [7], [9, 18], [20]],  
# [[6], [7], [9], [18, 20]],   [[6], [7], [], [9, 18,20]],   [[6], [], [7, 9, 18, 20], []],    [[6], [], [7, 9, 18], [20]], 
# [[6], [], [7,9], [18, 20]],    [[6], [], [7], [9, 18, 20]],    [[6], [], [], [7, 9, 18, 20]], [[],[6, 7, 9, 18, 20], [], []], 
# [[], [6, 7, 9, 18], [20], []],   [[], [6, 7, 9, 18],[], [20]],   [[], [6, 7, 9], [18, 20], []],   [[], [6, 7, 9], [18], [20]],
# [[], [6,7, 9], [], [18, 20]],   [[], [6, 7], [9, 18, 20], []],    [[], [6, 7], [9, 18], [20]], [[], [6, 7], [9], [18, 20]],
# [[], [6, 7], [], [9, 18, 20]],   [[], [6], [7, 9, 18, 20], []],   [[], [6], [7, 9, 18], [20]],   [[], [6], [7, 9], [18, 20]],
# [[], [6],[7], [9, 18, 20]],   [[], [6], [], [7, 9, 18, 20]],   [[], [], [6, 7, 9, 18, 20], []],   [[], [], [6, 7, 9, 18], [20]], 
# [[], [], [6, 7, 9], [18, 20]],   [[], [], [6,7], [9, 18, 20]],   [[], [], [6], [7, 9, 18, 20]],   [[], [], [], [6, 7, 9, 18, 20]]]


# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# C:\Users\Daniel\Desktop\Computer Science\Freshman Success Community\group projec
# t natural breaks>python natural_breaks_all.py
# Mean of (numbers):
# ------------------------
# 9.3935483871
# ------------------------
# sdam of (numbers)
# ------------------------
# 10598.0133097
# ------------------------
# Natural Break Result:
# -----------------------------------------------------------------------------
# Natural Break (5)
# [[[-19.09], [0.59, 0.6, 0.6, 0.6, 0.6, 0.6, 0.61, 0.61, 0.61, 0.09, 0.12, 0.13,
# 0.13, 0.14, 0.16, 0.18, 0.19, 0.22, 0.22, 0.24], [7.37, 7.87, 8], [19.13, 20.22,
#  32.53], [46.05, 49.88, 50.02, 61.98]]]
# -----------------------------------------------------------------------------
# Natural Break (7)
# [[[-19.09], [0.59, 0.6, 0.6, 0.6, 0.6, 0.6, 0.61, 0.61, 0.61, 0.09, 0.12, 0.13,
# 0.13, 0.14, 0.16, 0.18, 0.19, 0.22, 0.22, 0.24], [7.37, 7.87, 8], [19.13, 20.22]
# , [32.53], [46.05, 49.88, 50.02], [61.98]]]
# -----------------------------------------------------------------------------

##############################################################################################################
# combinations examples:
# alogrith of how recStressCommunity works

# 2x2 1+1+1
# [1,2][]
# [1][2]
# [][1,2]

# 3x3 1+2+3+4
# [0,1,2][][]   

# [0,1][2][] 
# [0,1][][2]

# [0][1,2][]
# [0][1][2]
# [0][][1,2]

# [][0,1,2][]
# [][0,1][2]
# [][0][1,2]
# [][][0,1,2]

# 4x3 1+2+3+4+5
# [0,1,2,3][][]

# [0,1,2][3][]
# [0,1,2][][3]

# [0,1][2,3][]
# [0,1][2][3]
# [0,1][][2,3]

# [0][1,2,3][]
# [0][1,2][3]
# [0][1][2,3]
# [0][][1,2,3]


# [][0,1,2,3][]
# [][0,1,2][3]
# [][0,1][2,3]
# [][0][1,2,3]
# [][][0,1,2,3]

# 4x4
# [0,1,2,4][][][]

# [0,1,2][4][][]
# [0,1,2][][4][]
# [0,1,2][][][4]

# [0,1][2,4][][]
# [0,1][2][4][]
# [0,1][2][][4]
# [0,1][][2,4][]
# [0,1][][2][4]
# [0,1][][][2,4]

# [0][1,2,4][][]
# [0][1,2][4][]
# [0][1,2][][4]
# [0][1][2,4][]
# [0][1][2][4]
# [0][1][][2,4]
# [0][][1,2,4][]
# [0][][1,2][4]
# [0][][1][2,4]
# [0][][][1,2,4]

# [][0,1,2,4][][]
# [][0,1,2][4][]
# [][0,1,2][][4]
# [][0,1][2,4][]
# [][0,1][2][4]
# [][0,1][][2,4]
# [][0][1,2,4][]
# [][0][1,2][4]
# [][0][1][2,4]
# [][0][][1,2,4]
# [][][0,1,2,4][]
# [][][0,1,2][4]
# [][][0,1][2,4]
# [][][0][1,2,4]
# [][][][0,1,2,4]
